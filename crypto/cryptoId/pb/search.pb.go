// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: search.proto

package search

import (
	fmt "fmt"
	_ "github.com/creationtime/lib-go/openapiv2"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/micro/go-micro/v2/api/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 搜索请求
type MatchReq struct {
	// 0:综合 1:标签 2:用户 3:发布
	Type int64 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// 搜索关键词
	Keyword string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// 页数
	Page int32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *MatchReq) Reset()         { *m = MatchReq{} }
func (m *MatchReq) String() string { return proto.CompactTextString(m) }
func (*MatchReq) ProtoMessage()    {}
func (*MatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{0}
}
func (m *MatchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchReq.Merge(m, src)
}
func (m *MatchReq) XXX_Size() int {
	return m.Size()
}
func (m *MatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_MatchReq proto.InternalMessageInfo

func (m *MatchReq) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *MatchReq) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *MatchReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// 搜索应答
type MatchRsp struct {
	// 标签
	Labels []*Label `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// 用户
	Users []*User `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	// 发布
	Posts []*Post `protobuf:"bytes,3,rep,name=posts,proto3" json:"posts,omitempty"`
	// 每页大小
	PageSize int32 `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// 总条数（非总页数）
	Total int32 `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *MatchRsp) Reset()         { *m = MatchRsp{} }
func (m *MatchRsp) String() string { return proto.CompactTextString(m) }
func (*MatchRsp) ProtoMessage()    {}
func (*MatchRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{1}
}
func (m *MatchRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchRsp.Merge(m, src)
}
func (m *MatchRsp) XXX_Size() int {
	return m.Size()
}
func (m *MatchRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchRsp.DiscardUnknown(m)
}

var xxx_messageInfo_MatchRsp proto.InternalMessageInfo

func (m *MatchRsp) GetLabels() []*Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MatchRsp) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *MatchRsp) GetPosts() []*Post {
	if m != nil {
		return m.Posts
	}
	return nil
}

func (m *MatchRsp) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *MatchRsp) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// 标签
type Label struct {
	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 类型id
	LabelTypeId int64 `protobuf:"varint,3,opt,name=labelTypeId,proto3" json:"labelTypeId,omitempty"`
	// 热度
	Hot int64 `protobuf:"varint,4,opt,name=hot,proto3" json:"hot,omitempty"`
	// 动态数
	PostNum int64 `protobuf:"varint,5,opt,name=postNum,proto3" json:"postNum,omitempty"`
	// 图集s
	PostIds []int64 `protobuf:"varint,6,rep,packed,name=postIds,proto3" json:"postIds,cv_id"`
}

func (m *Label) Reset()         { *m = Label{} }
func (m *Label) String() string { return proto.CompactTextString(m) }
func (*Label) ProtoMessage()    {}
func (*Label) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{2}
}
func (m *Label) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Label) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Label.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Label) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Label.Merge(m, src)
}
func (m *Label) XXX_Size() int {
	return m.Size()
}
func (m *Label) XXX_DiscardUnknown() {
	xxx_messageInfo_Label.DiscardUnknown(m)
}

var xxx_messageInfo_Label proto.InternalMessageInfo

func (m *Label) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Label) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Label) GetLabelTypeId() int64 {
	if m != nil {
		return m.LabelTypeId
	}
	return 0
}

func (m *Label) GetHot() int64 {
	if m != nil {
		return m.Hot
	}
	return 0
}

func (m *Label) GetPostNum() int64 {
	if m != nil {
		return m.PostNum
	}
	return 0
}

func (m *Label) GetPostIds() []int64 {
	if m != nil {
		return m.PostIds
	}
	return nil
}

// 用户
type User struct {
	// 用户id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,cv_id,omitempty"`
	// 用户昵称
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	// 关注状态 0:未关注 1:已关注 2:相互关注
	FollowStatus int64 `protobuf:"varint,3,opt,name=followStatus,proto3" json:"followStatus,omitempty"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{3}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *User) GetFollowStatus() int64 {
	if m != nil {
		return m.FollowStatus
	}
	return 0
}

// 发布
type Post struct {
	// 用户id
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	// 用户名
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	// 关注状态 0:未关注 1:已关注 2:相互关注
	IsFollow int64 `protobuf:"varint,3,opt,name=isFollow,proto3" json:"isFollow,omitempty"`
	// 用户头像
	HeadUrl string `protobuf:"bytes,4,opt,name=headUrl,proto3" json:"headUrl,omitempty"`
	// 图集id
	Id int64 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	// 描述
	Desc string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	// 标签列表
	LabelList []*Label `protobuf:"bytes,7,rep,name=labelList,proto3" json:"labelList,omitempty"`
	// 图片数量
	PicNum int64 `protobuf:"varint,8,opt,name=picNum,proto3" json:"picNum,omitempty"`
	// 类型
	CreateType int32 `protobuf:"varint,9,opt,name=createType,proto3" json:"createType,omitempty"`
	// 视频地址
	VideoUrl string `protobuf:"bytes,10,opt,name=videoUrl,proto3" json:"videoUrl,omitempty"`
	// 视频时长
	VideoTime int32 `protobuf:"varint,11,opt,name=videoTime,proto3" json:"videoTime,omitempty"`
	// 创建时间
	CreateTime string `protobuf:"bytes,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
	// 点赞数
	Praises int64 `protobuf:"varint,13,opt,name=praises,proto3" json:"praises,omitempty"`
	// 浏览数
	Views int64 `protobuf:"varint,14,opt,name=views,proto3" json:"views,omitempty"`
	// 收藏数
	Favorites int64 `protobuf:"varint,15,opt,name=favorites,proto3" json:"favorites,omitempty"`
	// 分享数
	Shares int64 `protobuf:"varint,16,opt,name=shares,proto3" json:"shares,omitempty"`
	// 是否点赞
	IsPraise int32 `protobuf:"varint,17,opt,name=isPraise,proto3" json:"isPraise,omitempty"`
	// 是否收藏
	IsFavorite int32 `protobuf:"varint,18,opt,name=isFavorite,proto3" json:"isFavorite,omitempty"`
	// 图集列表
	Images []string `protobuf:"bytes,19,rep,name=images,proto3" json:"images,omitempty"`
	// 封面
	Cover string `protobuf:"bytes,20,opt,name=cover,proto3" json:"cover,omitempty"`
	// 是否置顶 1：置顶 2：非置顶
	IsTop int32 `protobuf:"varint,21,opt,name=isTop,proto3" json:"isTop,omitempty"`
	// 审核状态 1审核通过 2审核拒绝 3 未审核
	Status int32 `protobuf:"varint,22,opt,name=status,proto3" json:"status,omitempty"`
	// 发布类型 1 视频 2 图集 3 广告
	VideoFlag int32 `protobuf:"varint,23,opt,name=videoFlag,proto3" json:"videoFlag,omitempty"`
}

func (m *Post) Reset()         { *m = Post{} }
func (m *Post) String() string { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()    {}
func (*Post) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{4}
}
func (m *Post) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Post) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Post.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Post) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Post.Merge(m, src)
}
func (m *Post) XXX_Size() int {
	return m.Size()
}
func (m *Post) XXX_DiscardUnknown() {
	xxx_messageInfo_Post.DiscardUnknown(m)
}

var xxx_messageInfo_Post proto.InternalMessageInfo

func (m *Post) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Post) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Post) GetIsFollow() int64 {
	if m != nil {
		return m.IsFollow
	}
	return 0
}

func (m *Post) GetHeadUrl() string {
	if m != nil {
		return m.HeadUrl
	}
	return ""
}

func (m *Post) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Post) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Post) GetLabelList() []*Label {
	if m != nil {
		return m.LabelList
	}
	return nil
}

func (m *Post) GetPicNum() int64 {
	if m != nil {
		return m.PicNum
	}
	return 0
}

func (m *Post) GetCreateType() int32 {
	if m != nil {
		return m.CreateType
	}
	return 0
}

func (m *Post) GetVideoUrl() string {
	if m != nil {
		return m.VideoUrl
	}
	return ""
}

func (m *Post) GetVideoTime() int32 {
	if m != nil {
		return m.VideoTime
	}
	return 0
}

func (m *Post) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *Post) GetPraises() int64 {
	if m != nil {
		return m.Praises
	}
	return 0
}

func (m *Post) GetViews() int64 {
	if m != nil {
		return m.Views
	}
	return 0
}

func (m *Post) GetFavorites() int64 {
	if m != nil {
		return m.Favorites
	}
	return 0
}

func (m *Post) GetShares() int64 {
	if m != nil {
		return m.Shares
	}
	return 0
}

func (m *Post) GetIsPraise() int32 {
	if m != nil {
		return m.IsPraise
	}
	return 0
}

func (m *Post) GetIsFavorite() int32 {
	if m != nil {
		return m.IsFavorite
	}
	return 0
}

func (m *Post) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Post) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *Post) GetIsTop() int32 {
	if m != nil {
		return m.IsTop
	}
	return 0
}

func (m *Post) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Post) GetVideoFlag() int32 {
	if m != nil {
		return m.VideoFlag
	}
	return 0
}

func init() {
	proto.RegisterType((*MatchReq)(nil), "MatchReq")
	proto.RegisterType((*MatchRsp)(nil), "MatchRsp")
	proto.RegisterType((*Label)(nil), "Label")
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*Post)(nil), "Post")
}

func init() { proto.RegisterFile("search.proto", fileDescriptor_453745cff914010e) }

var fileDescriptor_453745cff914010e = []byte{
	// 891 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x54, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xce, 0x7a, 0xb3, 0x1b, 0x7b, 0x92, 0xb4, 0xc9, 0xb8, 0x84, 0x91, 0x41, 0xae, 0x65, 0xa1,
	0xca, 0x12, 0x8d, 0x0d, 0x2e, 0xa4, 0x5c, 0x71, 0x21, 0x10, 0x29, 0x84, 0x76, 0x93, 0x34, 0x11,
	0x42, 0x42, 0xe3, 0xdd, 0xf1, 0xee, 0x28, 0x6b, 0xcf, 0x66, 0x67, 0xbc, 0x89, 0x7b, 0xe4, 0x84,
	0x38, 0x55, 0x1c, 0x38, 0x20, 0x0e, 0x88, 0x43, 0x7f, 0x01, 0x3f, 0x21, 0x07, 0x8e, 0x3d, 0x72,
	0xaa, 0x50, 0x22, 0x81, 0x94, 0x5f, 0x51, 0xcd, 0x3b, 0xbb, 0xfe, 0xb8, 0xbd, 0xcf, 0xf3, 0xbc,
	0xfb, 0x7e, 0xef, 0xa0, 0x35, 0xc9, 0x68, 0xea, 0x47, 0xed, 0x24, 0x15, 0x4a, 0xd4, 0x3e, 0x0a,
	0xb9, 0x8a, 0xc6, 0xfd, 0xb6, 0x2f, 0x86, 0x9d, 0x21, 0xf7, 0x53, 0xd1, 0x09, 0xc5, 0xb6, 0x31,
	0xb2, 0x6e, 0x87, 0x26, 0xbc, 0x03, 0x7e, 0xda, 0xca, 0xbf, 0xd8, 0x0e, 0xb9, 0x6a, 0x5f, 0x5e,
	0x86, 0xe6, 0x93, 0x64, 0x3b, 0x08, 0x3b, 0x22, 0x61, 0x23, 0x9a, 0xf0, 0xac, 0xdb, 0x19, 0x70,
	0x16, 0x07, 0xdf, 0x26, 0x8a, 0x8b, 0xd1, 0x9c, 0x7b, 0x91, 0x20, 0x14, 0xa1, 0x30, 0xf1, 0xfa,
	0xe3, 0x01, 0x20, 0x13, 0x5c, 0x5b, 0xc6, 0xbd, 0xb9, 0x8f, 0xca, 0xdf, 0x50, 0xe5, 0x47, 0x1e,
	0x3b, 0xc7, 0x18, 0x2d, 0xab, 0x49, 0xc2, 0x88, 0xd5, 0xb0, 0x5a, 0xb6, 0x07, 0x36, 0x26, 0x68,
	0xe5, 0x8c, 0x4d, 0x2e, 0x44, 0x1a, 0x10, 0xbb, 0x61, 0xb5, 0x2a, 0x5e, 0x01, 0xb5, 0x77, 0x42,
	0x43, 0x46, 0x96, 0x1b, 0x56, 0xcb, 0xf1, 0xc0, 0x6e, 0xfe, 0x6a, 0x15, 0xe1, 0x64, 0x82, 0xeb,
	0xc8, 0x8d, 0x69, 0x9f, 0xc5, 0x92, 0x58, 0x0d, 0xbb, 0xb5, 0xda, 0x75, 0xdb, 0xfb, 0x1a, 0x7a,
	0x39, 0x8b, 0xdf, 0x43, 0xce, 0x58, 0xb2, 0x54, 0x92, 0x12, 0xc8, 0x4e, 0xfb, 0x58, 0xb2, 0xd4,
	0x33, 0x9c, 0x16, 0x13, 0x21, 0x95, 0x24, 0x76, 0x2e, 0x3e, 0x15, 0x52, 0x79, 0x86, 0xc3, 0x35,
	0x54, 0xd6, 0xe9, 0x0e, 0xf9, 0x8b, 0x22, 0xfd, 0x14, 0xe3, 0x7b, 0xc8, 0x51, 0x42, 0xd1, 0x98,
	0x38, 0x20, 0x18, 0xd0, 0x7c, 0x65, 0x21, 0x07, 0xb2, 0xe3, 0x3b, 0xa8, 0xc4, 0x83, 0xbc, 0xc5,
	0x12, 0x87, 0x36, 0x46, 0x74, 0xc8, 0x48, 0x09, 0xba, 0x03, 0x1b, 0x37, 0xd0, 0x2a, 0xd4, 0x78,
	0x34, 0x49, 0xd8, 0x9e, 0x69, 0xdc, 0xf6, 0xe6, 0x29, 0xbc, 0x81, 0xec, 0x48, 0x28, 0x48, 0x6e,
	0x7b, 0xda, 0xd4, 0x83, 0xd2, 0xc5, 0x1d, 0x8c, 0x87, 0x90, 0xd9, 0xf6, 0x0a, 0x88, 0x3f, 0x34,
	0xca, 0x5e, 0x20, 0x89, 0xdb, 0xb0, 0x5b, 0x76, 0x6f, 0xf3, 0xf6, 0xcd, 0xfd, 0xf5, 0x9c, 0x7a,
	0xe8, 0x67, 0x3f, 0xf0, 0xc0, 0x2b, 0x3c, 0x9a, 0x23, 0xb4, 0xac, 0xc7, 0x80, 0x1f, 0xcc, 0xca,
	0xec, 0x6d, 0xdd, 0xbe, 0xb9, 0x8f, 0x79, 0x60, 0x5c, 0x1f, 0x8a, 0x21, 0x57, 0x6c, 0x98, 0xa8,
	0x09, 0x94, 0x5f, 0x43, 0xe5, 0x11, 0xf7, 0xcf, 0xe6, 0x5a, 0x98, 0x62, 0xdc, 0x44, 0x6b, 0x03,
	0x11, 0xc7, 0xe2, 0xe2, 0x50, 0x51, 0x35, 0x96, 0x79, 0x1f, 0x0b, 0x5c, 0xf3, 0x0f, 0x07, 0x2d,
	0xeb, 0xd1, 0xea, 0x6d, 0xe9, 0xc9, 0xef, 0x15, 0x49, 0xdd, 0x5f, 0xae, 0xaa, 0xa5, 0xb2, 0xe5,
	0xe5, 0x2c, 0x6e, 0xa2, 0xb2, 0xb6, 0x0e, 0xa6, 0x89, 0xa6, 0x1e, 0x53, 0x5e, 0x17, 0xc3, 0xe5,
	0x2e, 0x84, 0xcf, 0x93, 0x4d, 0x31, 0x6e, 0xa0, 0x95, 0x88, 0xd1, 0xe0, 0x38, 0x8d, 0x61, 0x6a,
	0xb3, 0xcf, 0x0b, 0x1a, 0x6f, 0x41, 0xcb, 0xce, 0x42, 0xf6, 0x7c, 0x43, 0x01, 0x93, 0x3e, 0x71,
	0xcd, 0x86, 0xb4, 0x8d, 0x3f, 0x40, 0x15, 0x58, 0xc7, 0x3e, 0x97, 0x8a, 0xac, 0x2c, 0x9c, 0xd7,
	0x4c, 0xd0, 0x3d, 0x25, 0xdc, 0xd7, 0x2b, 0x29, 0x2f, 0xf6, 0x64, 0x58, 0x5c, 0x47, 0xc8, 0x4f,
	0x19, 0x55, 0x4c, 0x6f, 0x95, 0x54, 0xe0, 0x60, 0xe6, 0x18, 0xdd, 0x4f, 0xc6, 0x03, 0x26, 0x74,
	0xd1, 0xc8, 0x0c, 0xb7, 0xc0, 0xf8, 0x7d, 0x54, 0x01, 0xfb, 0x88, 0x0f, 0x19, 0x59, 0x85, 0x4f,
	0x67, 0x04, 0x7e, 0x30, 0x8d, 0xac, 0xe5, 0xb5, 0x85, 0x86, 0xe7, 0x14, 0xb8, 0x9a, 0x94, 0x72,
	0xc9, 0x24, 0x59, 0xcf, 0xaf, 0xc6, 0x40, 0x7d, 0xc7, 0x19, 0x67, 0x17, 0x92, 0xdc, 0x01, 0xde,
	0x00, 0x9d, 0x75, 0x40, 0x33, 0x91, 0x72, 0xc5, 0x24, 0xb9, 0x0b, 0xca, 0x8c, 0xc0, 0x5b, 0xc8,
	0x95, 0x11, 0x4d, 0x99, 0x24, 0x1b, 0x20, 0xe5, 0xc8, 0xec, 0xe5, 0x29, 0x04, 0x26, 0x9b, 0xe6,
	0x7f, 0x29, 0xb0, 0x9e, 0x01, 0x97, 0xbb, 0x79, 0x08, 0x82, 0xcd, 0x0c, 0x66, 0x8c, 0x8e, 0xc9,
	0x87, 0x34, 0x64, 0x92, 0x54, 0x1b, 0x76, 0xab, 0xe2, 0xe5, 0x48, 0xd7, 0xe7, 0x8b, 0x8c, 0xa5,
	0xe4, 0x1e, 0x0c, 0xc6, 0x00, 0xcd, 0x72, 0x79, 0x24, 0x12, 0xf2, 0x8e, 0xf9, 0xfb, 0x00, 0x40,
	0x5d, 0xe6, 0x04, 0xb7, 0x80, 0xce, 0x91, 0xde, 0x22, 0x8c, 0x6c, 0x37, 0xa6, 0x21, 0x79, 0x57,
	0x4b, 0xd3, 0x21, 0xcd, 0x84, 0xee, 0x2b, 0x0b, 0xb9, 0x87, 0xf0, 0x86, 0xe2, 0x9f, 0x2c, 0xe4,
	0xc0, 0xfb, 0x82, 0xef, 0xb6, 0x43, 0xd1, 0xd6, 0x8f, 0xa4, 0xc7, 0xce, 0xc7, 0x4c, 0xaa, 0xda,
	0xc6, 0x8c, 0x90, 0x89, 0x18, 0x49, 0xd6, 0xfc, 0xfe, 0xb7, 0xab, 0xea, 0x29, 0x7a, 0x8e, 0xd6,
	0x3f, 0x1f, 0xab, 0x48, 0xa4, 0xfc, 0x05, 0xd5, 0xcf, 0x24, 0xfe, 0x72, 0x67, 0xef, 0x52, 0xc6,
	0xcf, 0xe3, 0xf8, 0xf1, 0xc7, 0xdd, 0xd3, 0x2f, 0x82, 0xe0, 0x90, 0xd1, 0x27, 0x9f, 0x46, 0xec,
	0xfc, 0xe4, 0x59, 0x16, 0x8c, 0xbe, 0x7b, 0x94, 0xd1, 0x83, 0xe0, 0xe4, 0xec, 0xab, 0x81, 0x7f,
	0xd2, 0x3b, 0xff, 0xcc, 0x3f, 0xe8, 0xa5, 0x27, 0xc1, 0x8e, 0xd8, 0x3f, 0x7e, 0x76, 0xfa, 0xf5,
	0x27, 0x93, 0xc7, 0x74, 0xb7, 0x7f, 0xb4, 0x13, 0xf9, 0x4f, 0x7c, 0x59, 0xdb, 0xfc, 0xf1, 0xaa,
	0xea, 0xfe, 0xf7, 0xf2, 0xf7, 0xff, 0xff, 0xfa, 0xf3, 0xe7, 0xab, 0xaa, 0x4d, 0x13, 0xde, 0x23,
	0x7f, 0x5f, 0xd7, 0xad, 0xd7, 0xd7, 0x75, 0xeb, 0xdf, 0xeb, 0xba, 0xf5, 0xf2, 0xa6, 0xbe, 0xf4,
	0xfa, 0xa6, 0xbe, 0xf4, 0xcf, 0x4d, 0x7d, 0xa9, 0xef, 0xc2, 0x63, 0xfb, 0xe8, 0x6d, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x93, 0x4e, 0xf1, 0xc0, 0x0c, 0x06, 0x00, 0x00,
}

func (m *MatchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Keyword) > 0 {
		i -= len(m.Keyword)
		copy(dAtA[i:], m.Keyword)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Keyword)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MatchRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x28
	}
	if m.PageSize != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Posts) > 0 {
		for iNdEx := len(m.Posts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Posts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Labels) > 0 {
		for iNdEx := len(m.Labels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Labels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Label) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Label) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Label) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PostIds) > 0 {
		dAtA2 := make([]byte, len(m.PostIds)*10)
		var j1 int
		for _, num1 := range m.PostIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintSearch(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if m.PostNum != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.PostNum))
		i--
		dAtA[i] = 0x28
	}
	if m.Hot != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Hot))
		i--
		dAtA[i] = 0x20
	}
	if m.LabelTypeId != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.LabelTypeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FollowStatus != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.FollowStatus))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Post) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Post) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Post) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VideoFlag != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.VideoFlag))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.Status != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.IsTop != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.IsTop))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Images[iNdEx])
			copy(dAtA[i:], m.Images[iNdEx])
			i = encodeVarintSearch(dAtA, i, uint64(len(m.Images[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.IsFavorite != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.IsFavorite))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.IsPraise != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.IsPraise))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Shares != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Shares))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Favorites != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Favorites))
		i--
		dAtA[i] = 0x78
	}
	if m.Views != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Views))
		i--
		dAtA[i] = 0x70
	}
	if m.Praises != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Praises))
		i--
		dAtA[i] = 0x68
	}
	if len(m.CreateTime) > 0 {
		i -= len(m.CreateTime)
		copy(dAtA[i:], m.CreateTime)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.CreateTime)))
		i--
		dAtA[i] = 0x62
	}
	if m.VideoTime != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.VideoTime))
		i--
		dAtA[i] = 0x58
	}
	if len(m.VideoUrl) > 0 {
		i -= len(m.VideoUrl)
		copy(dAtA[i:], m.VideoUrl)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.VideoUrl)))
		i--
		dAtA[i] = 0x52
	}
	if m.CreateType != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.CreateType))
		i--
		dAtA[i] = 0x48
	}
	if m.PicNum != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.PicNum))
		i--
		dAtA[i] = 0x40
	}
	if len(m.LabelList) > 0 {
		for iNdEx := len(m.LabelList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LabelList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x32
	}
	if m.Id != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x28
	}
	if len(m.HeadUrl) > 0 {
		i -= len(m.HeadUrl)
		copy(dAtA[i:], m.HeadUrl)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.HeadUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsFollow != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.IsFollow))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSearch(dAtA []byte, offset int, v uint64) int {
	offset -= sovSearch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MatchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSearch(uint64(m.Type))
	}
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovSearch(uint64(m.Page))
	}
	return n
}

func (m *MatchRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.Posts) > 0 {
		for _, e := range m.Posts {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if m.PageSize != 0 {
		n += 1 + sovSearch(uint64(m.PageSize))
	}
	if m.Total != 0 {
		n += 1 + sovSearch(uint64(m.Total))
	}
	return n
}

func (m *Label) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSearch(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.LabelTypeId != 0 {
		n += 1 + sovSearch(uint64(m.LabelTypeId))
	}
	if m.Hot != 0 {
		n += 1 + sovSearch(uint64(m.Hot))
	}
	if m.PostNum != 0 {
		n += 1 + sovSearch(uint64(m.PostNum))
	}
	if len(m.PostIds) > 0 {
		l = 0
		for _, e := range m.PostIds {
			l += sovSearch(uint64(e))
		}
		n += 1 + sovSearch(uint64(l)) + l
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSearch(uint64(m.Id))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.FollowStatus != 0 {
		n += 1 + sovSearch(uint64(m.FollowStatus))
	}
	return n
}

func (m *Post) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovSearch(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.IsFollow != 0 {
		n += 1 + sovSearch(uint64(m.IsFollow))
	}
	l = len(m.HeadUrl)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSearch(uint64(m.Id))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if len(m.LabelList) > 0 {
		for _, e := range m.LabelList {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if m.PicNum != 0 {
		n += 1 + sovSearch(uint64(m.PicNum))
	}
	if m.CreateType != 0 {
		n += 1 + sovSearch(uint64(m.CreateType))
	}
	l = len(m.VideoUrl)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.VideoTime != 0 {
		n += 1 + sovSearch(uint64(m.VideoTime))
	}
	l = len(m.CreateTime)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Praises != 0 {
		n += 1 + sovSearch(uint64(m.Praises))
	}
	if m.Views != 0 {
		n += 1 + sovSearch(uint64(m.Views))
	}
	if m.Favorites != 0 {
		n += 1 + sovSearch(uint64(m.Favorites))
	}
	if m.Shares != 0 {
		n += 2 + sovSearch(uint64(m.Shares))
	}
	if m.IsPraise != 0 {
		n += 2 + sovSearch(uint64(m.IsPraise))
	}
	if m.IsFavorite != 0 {
		n += 2 + sovSearch(uint64(m.IsFavorite))
	}
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			l = len(s)
			n += 2 + l + sovSearch(uint64(l))
		}
	}
	l = len(m.Cover)
	if l > 0 {
		n += 2 + l + sovSearch(uint64(l))
	}
	if m.IsTop != 0 {
		n += 2 + sovSearch(uint64(m.IsTop))
	}
	if m.Status != 0 {
		n += 2 + sovSearch(uint64(m.Status))
	}
	if m.VideoFlag != 0 {
		n += 2 + sovSearch(uint64(m.VideoFlag))
	}
	return n
}

func sovSearch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSearch(x uint64) (n int) {
	return sovSearch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MatchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, &Label{})
			if err := m.Labels[len(m.Labels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Posts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Posts = append(m.Posts, &Post{})
			if err := m.Posts[len(m.Posts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Label) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Label: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Label: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelTypeId", wireType)
			}
			m.LabelTypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LabelTypeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hot", wireType)
			}
			m.Hot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hot |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostNum", wireType)
			}
			m.PostNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PostIds = append(m.PostIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSearch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSearch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PostIds) == 0 {
					m.PostIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PostIds = append(m.PostIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PostIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowStatus", wireType)
			}
			m.FollowStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Post) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Post: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Post: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			m.IsFollow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFollow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelList = append(m.LabelList, &Label{})
			if err := m.LabelList[len(m.LabelList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PicNum", wireType)
			}
			m.PicNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PicNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateType", wireType)
			}
			m.CreateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoTime", wireType)
			}
			m.VideoTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Praises", wireType)
			}
			m.Praises = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Praises |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Views", wireType)
			}
			m.Views = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Views |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Favorites", wireType)
			}
			m.Favorites = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Favorites |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			m.Shares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shares |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPraise", wireType)
			}
			m.IsPraise = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPraise |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFavorite", wireType)
			}
			m.IsFavorite = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFavorite |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTop", wireType)
			}
			m.IsTop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsTop |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoFlag", wireType)
			}
			m.VideoFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSearch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSearch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSearch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSearch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSearch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSearch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSearch = fmt.Errorf("proto: unexpected end of group")
)
